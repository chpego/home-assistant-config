leave_home:
  alias: Quitter la maison
  mode: queued
  sequence:
  - service: light.turn_off
    target:
      entity_id:
      - light.all_lights
    data: {}
  - service: media_player.turn_off
    target:
      entity_id:
      - media_player.all_media_players
    data: {}
  - service: switch.turn_off
    data: {}
    target:
      entity_id: switch.microphones
  - if:
    - condition: state
      entity_id: binary_sensor.all_doors
      state: 'on'
    - condition: template
      value_template: '{{call_from_main_door != True}}'
    then:
    - variables:
        open_doors: "{{ \n  expand(states.binary_sensor.all_doors.attributes.entity_id)\n
          \   | selectattr('state', 'eq', 'on')\n    | map(attribute='attributes.friendly_name')
          \n    | list\n    | join(\", \")\n}}"
    - event: NOTIFIER
      event_data:
        action: send_to_nearest
        title: "️\U0001F6AA Porte(s) ouverte(s) !"
        message: 'Les portes suivantes sont toujours ouvertes alors que personne n''est
          présent:  {{open_doors}}'
        click_url: /lovelace/openings
        tag: home_empty_door_open
        until:
        - entity_id: binary_sensor.home_occupied
          new_state: 'on'
        - entity_id: binary_sensor.all_doors
          new_state: 'off'
  - if:
    - condition: state
      entity_id: binary_sensor.all_doors
      state: 'on'
    - condition: template
      value_template: '{{call_from_main_door == True}}'
    then:
    - variables:
        open_doors: "{{ \n  expand(states.binary_sensor.all_doors.attributes.entity_id)\n
          \   | selectattr('state', 'eq', 'on')        \n    | rejectattr('entity_id',
          'eq', 'binary_sensor.capteur_ouverture_porte_entree')\n    | map(attribute='attributes.friendly_name')
          \n    | list\n    | join(\", \")\n}}"
    - if:
      - condition: template
        value_template: '{{open_doors != ""}}'
      then:
      - event: NOTIFIER
        event_data:
          action: send_to_nearest
          title: "️\U0001F6AA Porte(s) ouverte(s) !"
          message: 'Les portes suivantes sont toujours ouvertes alors que personne
            n''est présent:  {{open_doors}}'
          click_url: /lovelace/openings
          tag: home_empty_door_open
          until:
          - entity_id: binary_sensor.home_occupied
            new_state: 'on'
          - entity_id: binary_sensor.all_doors
            new_state: 'off'
  - if:
    - condition: state
      entity_id: binary_sensor.all_windows
      state: 'on'
    then:
    - variables:
        open_windows: "{{ \n  expand(states.binary_sensor.all_windows.attributes.entity_id)\n
          \   | selectattr('state', 'eq', 'on')\n    | map(attribute='attributes.friendly_name')
          \n    | list\n    | join(\", \")\n}}"
    - event: NOTIFIER
      event_data:
        action: send_to_nearest
        title: "️\U0001F6AA Fenêtre(s) ouverte(s) !"
        message: 'Les fenêtres suivantes sont toujours ouvertes alors que personne
          n''est présent: {{open_windows}}'
        click_url: /lovelace/openings
        tag: home_empty_window_open
        until:
        - entity_id: binary_sensor.home_occupied
          new_state: 'on'
        - entity_id: binary_sensor.all_windows
          new_state: 'off'
  - if:
    - condition: state
      entity_id: binary_sensor.is_oven_running
      state: 'on'
    then:
    - event: NOTIFIER
      event_data:
        action: send_to_nearest
        title: "\U0001F958 Four allumé !"
        message: Le four est en marche alors que personne n'est présent!
        tag: home_empty_oven_on
        interuption_level: critical
        until:
        - entity_id: binary_sensor.home_occupied
          new_state: 'on'
        - entity_id: binary_sensor.is_oven_running
          new_state: 'off'
  - if:
    - condition: state
      entity_id: binary_sensor.is_induction_cooktop_running
      state: 'on'
    then:
    - event: NOTIFIER
      event_data:
        action: send_to_nearest
        title: "\U0001F373 Plaques à induction allumé !"
        message: Les plaques à induction sont en marche alors que personne n'est présent!
        tag: home_empty_induction_cooktop_on
        interuption_level: critical
        until:
        - entity_id: binary_sensor.home_occupied
          new_state: 'on'
        - entity_id: binary_sensor.is_induction_cooktop_running
          new_state: 'off'
  icon: mdi:home-export-outline
  fields:
    call_from_main_door:
      selector:
        boolean: {}
      name: Appel depuis la porte d'entrée
      required: true
      default: false
welcome_home:
  alias: Bienvenue a la maison
  mode: queued
  sequence:
  - service: switch.turn_on
    data: {}
    target:
      entity_id: switch.microphones
  - service: light.turn_on
    metadata: {}
    data:
      transition: 2
      brightness_pct: 100
    target:
      entity_id: light.entree_suspension
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - service: light.turn_on
    metadata: {}
    data:
      transition: 2
      brightness_pct: 70
    target:
      entity_id:
      - light.salon_buffet_gauche
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - service: light.turn_on
    metadata: {}
    data:
      transition: 2
      brightness_pct: 70
    target:
      entity_id:
      - light.salon_buffet_droit
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - service: light.turn_on
    metadata: {}
    data:
      transition: 2
      brightness_pct: 100
    target:
      entity_id: light.salon_suspension_tv
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - service: light.turn_on
    metadata: {}
    data:
      brightness_pct: 60
      transition: 2
    target:
      entity_id:
      - light.hue_aurelle_panel_1
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - service: light.turn_on
    target:
      entity_id: light.salon_trepied
    data:
      transition: 2
      brightness_pct: 100
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - service: light.turn_on
    target:
      entity_id:
      - light.cuisine_comptoir
    data:
      transition: 2
      brightness_pct: 60
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - service: light.turn_on
    target:
      entity_id:
      - light.cuisine_suspension
    data:
      transition: 2
      brightness_pct: 100
  icon: mdi:home-import-outline
reset_lights_day_area:
  alias: Réinitialisation Lumières Coin Jour
  mode: restart
  sequence:
  - service: hue.activate_scene
    data:
      transition: 1
    target:
      entity_id:
      - scene.salon_salon_100
      - scene.entree_entree_100
      - scene.cuisine_cuisine_100
  icon: mdi:sofa
turn_off_media_center:
  alias: Turn Off Media center
  mode: single
  sequence:
  - service: media_player.turn_off
    target:
      entity_id:
      - media_player.kef
    data: {}
  - service: remote.turn_off
    data: {}
    target:
      entity_id: remote.jl_s_tv
  icon: mdi:remote-tv-off
turn_on_media_center:
  alias: Turn On Media center
  mode: single
  sequence:
  - service: media_player.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: media_player.music_assistant_salon
  - service: media_player.turn_on
    target:
      entity_id:
      - media_player.kef
    data: {}
  - if:
    - condition: not
      conditions:
      - condition: state
        entity_id: media_player.kef
        state: Opt
        attribute: source
    then:
    - service: media_player.select_source
      target:
        entity_id: media_player.kef
      data:
        source: Opt
  - service: remote.turn_on
    data: {}
    target:
      entity_id: remote.jl_s_tv
  icon: mdi:remote-tv
pulse_2d_led_matrix:
  alias: Pulse - Allumer
  sequence:
  - choose:
    - conditions:
      - condition: time
        after: input_datetime.pulse_start_schedule
        before: input_datetime.pulse_end_schedule
      - condition: state
        entity_id: input_boolean.guest_mode
        state: 'off'
      sequence:
      - if:
        - condition: state
          entity_id: light.2d_matrix
          state: 'off'
        then:
        - service: light.turn_on
          data: {}
          target:
            entity_id:
            - light.2d_matrix
        - service: input_datetime.set_datetime
          data:
            datetime: '{{ now() + timedelta( seconds = 3 ) }}'
          target:
            entity_id: input_datetime.pulse_end_time
        else:
        - service: input_datetime.set_datetime
          data:
            datetime: '{{as_datetime(states(''input_datetime.pulse_end_time'')) +   timedelta(
              seconds = 3 )}}'
          target:
            entity_id: input_datetime.pulse_end_time
    default:
    - service: light.turn_off
      target:
        entity_id: light.2d_matrix
      data: {}
  mode: queued
  icon: mdi:crop-square
  max: 1000
lights_set_tv:
  alias: Réglage lumières lors que la TV joue un média
  mode: restart
  sequence:
  - service: light.turn_off
    target:
      entity_id:
      - light.cuisine
      - light.entree
    data:
      transition: 1
  - service: hue.activate_scene
    target:
      entity_id: scene.salon_salon_tv_playing
    data:
      transition: 1
  icon: mdi:play
lights_set_tv_paused:
  alias: Réglage lumières lors que la TV est en pause
  mode: restart
  sequence:
  - service: hue.activate_scene
    target:
      entity_id:
      - scene.cuisine_cuisine_tv_paused
      - scene.entree_entree_tv_paused
      - scene.salon_salon_tv_paused
    data:
      transition: 1
  icon: mdi:pause
wake_up:
  alias: Réveil Lumineux - Lumières
  sequence:
  - service: light.turn_off
    data: {}
    target:
      entity_id: light.chambre
  - service: light.turn_on
    data:
      transition: 300
      brightness_pct: 100
      color_temp: 490
    target:
      entity_id: light.chambre_bloom
  - delay:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
  - service: light.turn_on
    data:
      transition: 300
      brightness_pct: 100
    target:
      entity_id:
      - light.chambre_suspension
      - light.chambre_chevet_droit
      - light.chambre_chevet_gauche
  - delay:
      hours: 0
      minutes: 10
      seconds: 0
      milliseconds: 0
  - service: light.turn_on
    data: {}
    target:
      entity_id: light.chambre_guirlande
  mode: single
  icon: mdi:weather-sunset-up
room_cleaning_first_floor:
  alias: Room Cleaning (Rez-De-Chaussée)
  sequence:
  - if:
    - condition: template
      value_template: '{{states("sensor.vacuum_selected_room_firsr_floor") | int >=
        1}}'
    then:
    - service: dreame_vacuum.vacuum_clean_segment
      data:
        segments: '{{ state_attr(''sensor.vacuum_selected_room_firsr_floor'', ''room_list'')
          }}'
      target:
        entity_id: vacuum.neuneu
    - service: input_boolean.turn_off
      data: {}
      target:
        entity_id:
        - input_boolean.vacuum_zone_kitchen
        - input_boolean.vacuum_zone_entry
        - input_boolean.vacuum_zone_bathroom
        - input_boolean.vacuum_zone_living_room
  mode: single
  icon: mdi:vacuum
start_marilou_bedtime_routine:
  alias: Démarrer la routine du sommeil de Marilou
  sequence:
  - service: scene.turn_on
    metadata: {}
    target:
      entity_id: scene.chambre_bebe_initial
  - service: media_player.turn_on
    data: {}
    target:
      entity_id:
      - media_player.music_assistant_chambre_marilou
  - service: mass.play_media
    target:
      entity_id:
      - media_player.music_assistant_chambre_marilou
    data:
      media_id: Au Dodo Marilou
      enqueue: replace
      radio_mode: true
      media_type: playlist
  - service: media_player.volume_set
    data:
      volume_level: 0.1
    target:
      entity_id:
      - media_player.music_assistant_chambre_marilou
  - service: media_player.shuffle_set
    data:
      shuffle: true
    target:
      entity_id:
      - media_player.music_assistant_chambre_marilou
  mode: single
  icon: mdi:bell-sleep
eteindre_temporairement_un_assistant_vocal:
  alias: Éteindre temporairement un assistant vocal
  sequence:
  - variables:
      target_entities: "{% set microphones = label_entities(\"Micro Assistant Vocal\")
        %}\n[\n  {%- for entity in device_entities(device) -%}\n    {%- if entity
        in microphones -%}\n      \"{{entity}}\",\n    {%- endif -%}\n  {%- endfor
        -%}\n]\n"
  - delay:
      hours: 0
      minutes: 0
      seconds: 5
      milliseconds: 0
  - service: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: '{{target_entities}}'
  - delay:
      hours: 0
      minutes: 30
      seconds: 0
      milliseconds: 0
  - service: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: '{{target_entities}}'
  fields:
    device:
      selector:
        device: {}
      name: Appareil
      description: Assistant Vocal à désactiver temporairement.
  mode: parallel
  icon: mdi:microphone-message-off
lancer_playlist_de_reveil:
  alias: Réveil Lumineux - Musique
  sequence:
  - service: media_player.turn_on
    data: {}
    target:
      entity_id:
      - media_player.music_assistant_chambre
  - service: media_player.volume_set
    data:
      volume_level: 0.1
    target:
      entity_id:
      - media_player.music_assistant_chambre
  - service: mass.play_media
    target:
      entity_id:
      - media_player.music_assistant_chambre
    data:
      media_id: ⏰ Réveil
      enqueue: replace
      media_type: playlist
  - service: media_player.shuffle_set
    data:
      shuffle: true
    target:
      entity_id:
      - media_player.music_assistant_chambre
  mode: single
  icon: mdi:alarm
