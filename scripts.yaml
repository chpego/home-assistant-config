leave_home:
  alias: Quitter la maison
  mode: queued
  sequence:
  - action: light.turn_off
    target:
      entity_id:
      - light.all_lights
    data: {}
  - action: script.eteindre_tous_les_lecteur_multimedia
    metadata: {}
    data: {}
  - action: switch.turn_off
    data: {}
    target:
      entity_id: switch.microphones
  - if:
    - condition: state
      entity_id: input_boolean.surveillance_de_la_maison_fermer_le_volet_quand_maison_vide
      state: 'on'
    then:
    - action: cover.close_cover
      metadata: {}
      data: {}
      target:
        entity_id: cover.living_room_cover
  - if:
    - condition: state
      entity_id: binary_sensor.all_doors
      state: 'on'
    - condition: template
      value_template: '{{call_from_main_door != True}}'
    then:
    - variables:
        open_doors: "{{ \n  expand(states.binary_sensor.all_doors.attributes.entity_id)\n
          \   | selectattr('state', 'eq', 'on')\n    | map(attribute='attributes.friendly_name')
          \n    | list\n    | join(\", \")\n}}"
    - event: NOTIFIER
      event_data:
        action: send_to_nearest
        title: "️\U0001F6AA Porte(s) ouverte(s) !"
        message: 'Les portes suivantes sont toujours ouvertes alors que personne n''est
          présent:  {{open_doors}}'
        click_url: /lovelace/openings
        tag: home_empty_door_open
        until:
        - entity_id: binary_sensor.home_occupied
          new_state: 'on'
        - entity_id: binary_sensor.all_doors
          new_state: 'off'
  - if:
    - condition: state
      entity_id: binary_sensor.all_doors
      state: 'on'
    - condition: template
      value_template: '{{call_from_main_door == True}}'
    then:
    - variables:
        open_doors: "{{ \n  expand(states.binary_sensor.all_doors.attributes.entity_id)\n
          \   | selectattr('state', 'eq', 'on')        \n    | rejectattr('entity_id',
          'eq', 'binary_sensor.capteur_ouverture_porte_entree')\n    | map(attribute='attributes.friendly_name')
          \n    | list\n    | join(\", \")\n}}"
    - if:
      - condition: template
        value_template: '{{open_doors != ""}}'
      then:
      - event: NOTIFIER
        event_data:
          action: send_to_nearest
          title: "️\U0001F6AA Porte(s) ouverte(s) !"
          message: 'Les portes suivantes sont toujours ouvertes alors que personne
            n''est présent:  {{open_doors}}'
          click_url: /lovelace/openings
          tag: home_empty_door_open
          until:
          - entity_id: binary_sensor.home_occupied
            new_state: 'on'
          - entity_id: binary_sensor.all_doors
            new_state: 'off'
  - if:
    - condition: state
      entity_id: binary_sensor.all_windows
      state: 'on'
    then:
    - variables:
        open_windows: "{{ \n  expand(states.binary_sensor.all_windows.attributes.entity_id)\n
          \   | selectattr('state', 'eq', 'on')\n    | map(attribute='attributes.friendly_name')
          \n    | list\n    | join(\", \")\n}}"
    - event: NOTIFIER
      event_data:
        action: send_to_nearest
        title: "️\U0001F6AA Fenêtre(s) ouverte(s) !"
        message: 'Les fenêtres suivantes sont toujours ouvertes alors que personne
          n''est présent: {{open_windows}}'
        click_url: /lovelace/openings
        tag: home_empty_window_open
        until:
        - entity_id: binary_sensor.home_occupied
          new_state: 'on'
        - entity_id: binary_sensor.all_windows
          new_state: 'off'
  - if:
    - condition: state
      entity_id: binary_sensor.is_oven_running
      state: 'on'
    then:
    - event: NOTIFIER
      event_data:
        action: send_to_nearest
        title: "\U0001F958 Four allumé !"
        message: Le four est en marche alors que personne n'est présent!
        tag: home_empty_oven_on
        interuption_level: critical
        until:
        - entity_id: binary_sensor.home_occupied
          new_state: 'on'
        - entity_id: binary_sensor.is_oven_running
          new_state: 'off'
  - if:
    - condition: state
      entity_id: binary_sensor.is_induction_cooktop_running
      state: 'on'
    then:
    - event: NOTIFIER
      event_data:
        action: send_to_nearest
        title: "\U0001F373 Plaques à induction allumé !"
        message: Les plaques à induction sont en marche alors que personne n'est présent!
        tag: home_empty_induction_cooktop_on
        interuption_level: critical
        until:
        - entity_id: binary_sensor.home_occupied
          new_state: 'on'
        - entity_id: binary_sensor.is_induction_cooktop_running
          new_state: 'off'
  icon: mdi:home-export-outline
  fields:
    call_from_main_door:
      selector:
        boolean: {}
      name: Appel depuis la porte d'entrée
      required: true
      default: false
welcome_home:
  alias: Bienvenue a la maison
  mode: queued
  sequence:
  - action: light.turn_on
    metadata: {}
    data:
      transition: 2
      brightness_pct: 100
    target:
      entity_id: light.entree_suspension
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - action: light.turn_on
    metadata: {}
    data:
      transition: 2
      brightness_pct: 70
    target:
      entity_id:
      - light.salon_buffet_gauche
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - action: light.turn_on
    metadata: {}
    data:
      transition: 2
      brightness_pct: 70
    target:
      entity_id:
      - light.salon_buffet_droit
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - action: light.turn_on
    metadata: {}
    data:
      transition: 2
      brightness_pct: 100
    target:
      entity_id: light.salon_suspension_tv
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - action: light.turn_on
    metadata: {}
    data:
      brightness_pct: 60
      transition: 2
    target:
      entity_id:
      - light.hue_aurelle_panel_1
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - action: light.turn_on
    target:
      entity_id: light.salon_trepied
    data:
      transition: 2
      brightness_pct: 100
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - action: light.turn_on
    target:
      entity_id:
      - light.cuisine_comptoir
    data:
      transition: 2
      brightness_pct: 60
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - action: light.turn_on
    target:
      entity_id:
      - light.cuisine_suspension
    data:
      transition: 2
      brightness_pct: 100
  icon: mdi:home-import-outline
  description: ''
turn_off_media_center:
  alias: Turn Off Media center
  mode: single
  sequence:
  - action: media_player.turn_off
    target:
      entity_id:
      - media_player.kef
    data: {}
  - action: remote.turn_off
    data: {}
    target:
      entity_id: remote.jl_s_tv
  icon: mdi:remote-tv-off
turn_on_media_center:
  alias: Turn On Media center
  mode: single
  sequence:
  - action: media_player.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: media_player.music_assistant_salon
  - action: media_player.turn_on
    target:
      entity_id:
      - media_player.kef
    data: {}
  - if:
    - condition: not
      conditions:
      - condition: state
        entity_id: media_player.kef
        state: Opt
        attribute: source
    then:
    - action: media_player.select_source
      target:
        entity_id: media_player.kef
      data:
        source: Opt
  - action: remote.turn_on
    data: {}
    target:
      entity_id: remote.jl_s_tv
  icon: mdi:remote-tv
pulse_2d_led_matrix:
  alias: Pulse - Allumer
  sequence:
  - choose:
    - conditions:
      - condition: time
        after: input_datetime.pulse_start_schedule
        before: input_datetime.pulse_end_schedule
      - condition: state
        entity_id: input_boolean.guest_mode
        state: 'off'
      sequence:
      - if:
        - condition: state
          entity_id: light.2d_matrix
          state: 'off'
        then:
        - action: light.turn_on
          data: {}
          target:
            entity_id:
            - light.2d_matrix
        - action: input_datetime.set_datetime
          data:
            datetime: '{{ now() + timedelta( seconds = 3 ) }}'
          target:
            entity_id: input_datetime.pulse_end_time
        else:
        - action: input_datetime.set_datetime
          data:
            datetime: '{{as_datetime(states(''input_datetime.pulse_end_time'')) +   timedelta(
              seconds = 3 )}}'
          target:
            entity_id: input_datetime.pulse_end_time
    default:
    - action: light.turn_off
      target:
        entity_id: light.2d_matrix
      data: {}
  mode: queued
  icon: mdi:crop-square
  max: 1000
wake_up:
  alias: Réveil Lumineux - Lumières
  sequence:
  - action: light.turn_off
    data: {}
    target:
      entity_id: light.chambre
  - action: light.turn_on
    data:
      transition: 300
      brightness_pct: 100
      color_temp: 490
    target:
      entity_id: light.chambre_bloom
  - delay:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
  - action: light.turn_on
    data:
      transition: 300
      brightness_pct: 100
    target:
      entity_id:
      - light.chambre_suspension
      - light.chambre_chevet_droit
      - light.chambre_chevet_gauche
  - delay:
      hours: 0
      minutes: 10
      seconds: 0
      milliseconds: 0
  - action: light.turn_on
    data: {}
    target:
      entity_id: light.chambre_guirlande
  mode: single
  icon: mdi:weather-sunset-up
room_cleaning_first_floor:
  alias: Room Cleaning (Rez-De-Chaussée)
  sequence:
  - if:
    - condition: template
      value_template: '{{states("sensor.vacuum_selected_room_firsr_floor") | int >=
        1}}'
    then:
    - action: dreame_vacuum.vacuum_clean_segment
      data:
        segments: '{{ state_attr(''sensor.vacuum_selected_room_firsr_floor'', ''room_list'')
          }}'
      target:
        entity_id: vacuum.neuneu
    - action: input_boolean.turn_off
      data: {}
      target:
        entity_id:
        - input_boolean.vacuum_zone_kitchen
        - input_boolean.vacuum_zone_entry
        - input_boolean.vacuum_zone_bathroom
        - input_boolean.vacuum_zone_living_room
    else:
    - action: vacuum.start
      metadata: {}
      data: {}
      target:
        entity_id: vacuum.neuneu
  mode: single
  icon: mdi:vacuum
start_marilou_bedtime_routine:
  alias: Démarrer la routine du sommeil de Marilou
  sequence:
  - action: scene.turn_on
    metadata: {}
    target:
      entity_id: scene.chambre_bebe_initial
  - action: media_player.turn_on
    data: {}
    target:
      entity_id:
      - media_player.chambre_marilou_sonos_music_assistant
  - action: mass.play_media
    target:
      entity_id:
      - media_player.chambre_marilou_sonos_music_assistant
    data:
      media_id: Au Dodo Marilou
      enqueue: replace
      radio_mode: true
      media_type: playlist
  - action: media_player.volume_set
    data:
      volume_level: 0.1
    target:
      entity_id:
      - media_player.chambre_marilou_sonos_music_assistant
  - action: media_player.shuffle_set
    data:
      shuffle: true
    target:
      entity_id:
      - media_player.chambre_marilou_sonos_music_assistant
  mode: single
  icon: mdi:bell-sleep
eteindre_temporairement_un_assistant_vocal:
  alias: Éteindre temporairement un assistant vocal
  sequence:
  - variables:
      target_entities: "{% set microphones = label_entities(\"Micro Assistant Vocal\")
        %}\n[\n  {%- for entity in device_entities(device) -%}\n    {%- if entity
        in microphones -%}\n      \"{{entity}}\",\n    {%- endif -%}\n  {%- endfor
        -%}\n]\n"
  - delay:
      hours: 0
      minutes: 0
      seconds: 5
      milliseconds: 0
  - action: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: '{{target_entities}}'
  - delay:
      hours: 0
      minutes: 30
      seconds: 0
      milliseconds: 0
  - action: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: '{{target_entities}}'
  fields:
    device:
      selector:
        device: {}
      name: Appareil
      description: Assistant Vocal à désactiver temporairement.
  mode: parallel
  icon: mdi:microphone-message-off
lancer_playlist_de_reveil:
  alias: Réveil Lumineux - Musique
  sequence:
  - action: media_player.turn_on
    data: {}
    target:
      entity_id:
      - media_player.chambre_sonos_music_assistant
  - action: media_player.volume_set
    data:
      volume_level: 0.1
    target:
      entity_id:
      - media_player.chambre_sonos_music_assistant
  - action: mass.play_media
    target:
      entity_id:
      - media_player.chambre_sonos_music_assistant
    data:
      media_id: ⏰ Réveil
      enqueue: replace
      media_type: playlist
  - action: media_player.shuffle_set
    data:
      shuffle: true
    target:
      entity_id:
      - media_player.chambre_sonos_music_assistant
  mode: single
  icon: mdi:alarm
gererer_texte_radio:
  alias: Radio
  sequence:
  - sequence:
    - action: media_player.turn_on
      data: {}
      target:
        entity_id: '{{music_media_player}}'
    - action: media_player.volume_set
      data:
        volume_level: 0.1
      target:
        entity_id: '{{music_media_player}}'
    - action: mass.play_media
      target:
        entity_id: '{{music_media_player}}'
      data:
        media_id: ⏰ Réveil
        enqueue: replace
        media_type: playlist
    - action: media_player.shuffle_set
      data:
        shuffle: true
      target:
        entity_id: '{{music_media_player}}'
    alias: Start music
  - wait_for_trigger:
    - platform: state
      entity_id:
      - media_player.chambre_sonos_music_assistant
      to: playing
    timeout:
      hours: 0
      minutes: 0
      seconds: 10
      milliseconds: 0
  - delay:
      hours: 0
      minutes: 1
      seconds: 0
      milliseconds: 0
    enabled: true
  - alias: Greetings and Weather
    sequence:
    - action: weather.get_forecasts
      metadata: {}
      data:
        type: hourly
      target:
        entity_id: weather.floirac
      response_variable: weather_forecast
    - action: conversation.process
      metadata: {}
      data:
        agent_id: conversation.gpt_radio
        text: "- It is the first message of the stream \n- SUBJECT: TIME AND DATE.
          The current time: {{ now().strftime(\"%X\") }} and the current date: {{now().strftime(\"%x\")
          }}    \n- SUBJECT: WEATHER. The current weather and the forecast for the
          day: {{weather_forecast}}\n- SUBJECT: CURRENTLY PLAYING. The current song
          playing: {{state_attr(music_media_player, \"media_title\")}} by {{state_attr(music_media_player,
          \"media_artist\")}}. Add some interesting info about the song or artist,
          if you know. It is not mandatory"
      response_variable: welcome_radio_generated_response
    - variables:
        welcome_radio_generated_response_formated: '{{ welcome_radio_generated_response.response.speech.plain.speech}}'
    - choose:
      - conditions:
        - condition: template
          value_template: '{{voice_provider == "home_assistant_cloud"}}'
        sequence:
        - action: tts.speak
          target:
            entity_id: tts.home_assistant_cloud
          data:
            cache: true
            media_player_entity_id: '{{radio_media_player}}'
            message: '{{welcome_radio_generated_response_formated}}'
            language: fr-FR
            options:
              voice: ClaudeNeural
      - conditions:
        - condition: template
          value_template: '{{voice_provider == "elevenlabs"}}'
        sequence:
        - action: tts.speak
          target:
            entity_id: tts.elevenlabs_tts
          data:
            cache: true
            media_player_entity_id: '{{radio_media_player}}'
            message: '{{welcome_radio_generated_response_formated}}'
  - delay:
      hours: 0
      minutes: 2
      seconds: 0
      milliseconds: 0
  - alias: Chores
    sequence:
    - action: conversation.process
      metadata: {}
      data:
        agent_id: conversation.gpt_radio
        text: "- This is not the first message of the stream\n- SUBJECT: TAKING OUT
          TRASH. Tell me if I need to take out my black bin or not. Here is a  boolean
          that is true if I need to: {{states(\"input_boolean.poubelle_noire_a_sortir\")}}.
          Tell me if I need to take out my recycling green bin or not. Here is a boolean
          that is true if I need to: {{states(\"input_boolean.poubelle_verte_a_sortir\")}}
          \ \n- SUBJECT: CAT LITTER. Tell me if I need to clean my cat litter. HEre
          is a boolean that is true if I need to: {{states(\"binary_sensor.is_litter_full\")}}\n-
          SUBJECT: CHABAN DELMAS BRIDGE. The next closing of the bridge will happen
          between {{as_local(as_datetime(states('sensor.chaban_delmas_next_closing_start_date')))}}
          and {{as_local(as_datetime(states('sensor.chaban_delmas_next_closing_end_date')))}}\nPlease
          note that today's date is {{now().strftime(\"%x\") }} and that the current
          time is {{ now().strftime(\"%X\") }}, mention the closing of the bridge
          only it is going to happen in the next few days (or today)"
      response_variable: task_radio_generated_response
    - variables:
        task_radio_generated_response_formated: '{{ task_radio_generated_response.response.speech.plain.speech}}'
    - choose:
      - conditions:
        - condition: template
          value_template: '{{voice_provider == "home_assistant_cloud"}}'
        sequence:
        - action: tts.speak
          target:
            entity_id: tts.home_assistant_cloud
          data:
            cache: true
            media_player_entity_id: '{{radio_media_player}}'
            message: '{{task_radio_generated_response_formated}}'
            language: fr-FR
            options:
              voice: ClaudeNeural
      - conditions:
        - condition: template
          value_template: '{{voice_provider == "elevenlabs"}}'
        sequence:
        - action: tts.speak
          target:
            entity_id: tts.elevenlabs_tts
          data:
            cache: true
            media_player_entity_id: '{{radio_media_player}}'
            message: '{{task_radio_generated_response_formated}}'
  - delay:
      hours: 0
      minutes: 2
      seconds: 0
      milliseconds: 0
  - alias: Calendar
    sequence:
    - action: calendar.get_events
      metadata: {}
      data:
        duration:
          hours: 24
          minutes: 0
          seconds: 0
      target:
        entity_id: calendar.nabucasa_calendar_personal
      response_variable: calendar_events
    - action: conversation.process
      metadata: {}
      data:
        agent_id: conversation.gpt_radio
        text: "- This is not the first message of the stream\n- SUBJECT: PROFESSIONAL
          MEETINGS. The meetings I need to attend at work. Here are the events for
          the next 24 hours: {{calendar_events}} \nPlease note that today's date is
          {{now().strftime(\"%x\") }} and that the current time is {{ now().strftime(\"%X\")
          }}. Ignore all events happening tomorrow, I am only interested but today's
          schedule.\nPlease remeber that you are a radio host. The text you generate
          will be spoken, so no URL.\nPlease remeber that the household is French,
          try to translate events name as much as possible.\n- This is the last message
          of the stream."
      response_variable: calendar_radio_generated_response
    - variables:
        calendar_radio_generated_response_formated: '{{calendar_radio_generated_response.response.speech.plain.speech}}'
    - choose:
      - conditions:
        - condition: template
          value_template: '{{voice_provider == "home_assistant_cloud"}}'
        sequence:
        - action: tts.speak
          target:
            entity_id: tts.home_assistant_cloud
          data:
            cache: true
            media_player_entity_id: '{{radio_media_player}}'
            message: '{{calendar_radio_generated_response_formated}}'
            language: fr-FR
            options:
              voice: ClaudeNeural
      - conditions:
        - condition: template
          value_template: '{{voice_provider == "elevenlabs"}}'
        sequence:
        - action: tts.speak
          target:
            entity_id: tts.elevenlabs_tts
          data:
            cache: true
            media_player_entity_id: '{{radio_media_player}}'
            message: '{{calendar_radio_generated_response_formated}}'
  mode: single
  icon: mdi:radio
  fields:
    voice_provider:
      selector:
        select:
          options:
          - label: ElevenLabs
            value: elevenlabs
          - label: Home Assistant Cloud
            value: home_assistant_cloud
      default: home_assistant_cloud
      required: true
      name: Fournisseur de voix
    music_media_player:
      selector:
        entity:
          multiple: false
          filter:
          - integration: mass
            domain: media_player
      name: Lecteur Multimedia pour la Musique
      default: media_player.music_assistant_chambre
      required: true
    radio_media_player:
      selector:
        entity:
          multiple: false
          filter:
          - domain: media_player
      name: Lecteur Multimedia pour la radio
      default: media_player.sonos_chambre
      required: true
controler_le_standing_desk:
  alias: Controler le Standing desk
  sequence:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{target_position == ''standing''}}'
      sequence:
      - repeat:
          sequence:
          - action: button.press
            target:
              entity_id:
              - button.standing_desk_move_desk_to_position_1
            data: {}
          - wait_for_trigger:
            - platform: state
              entity_id:
              - binary_sensor.standing_desk_moving
              to: 'on'
            timeout:
              hours: 0
              minutes: 0
              seconds: 3
              milliseconds: 0
          - wait_for_trigger:
            - platform: state
              entity_id:
              - binary_sensor.standing_desk_moving
              to: 'off'
            timeout:
              hours: 0
              minutes: 0
              seconds: 20
              milliseconds: 0
          - if:
            - condition: template
              value_template: '{{ repeat.index >= 5 }}'
            then:
            - stop: ''
          while:
          - condition: not
            conditions:
            - condition: state
              entity_id: sensor.standing_desk_state
              state: standing_position
    - conditions:
      - condition: template
        value_template: '{{target_position == ''sitting''}}'
      sequence:
      - repeat:
          sequence:
          - action: button.press
            target:
              entity_id: button.standing_desk_move_desk_to_position_2
            data: {}
          - wait_for_trigger:
            - platform: state
              entity_id:
              - binary_sensor.standing_desk_moving
              to: 'on'
            timeout:
              hours: 0
              minutes: 0
              seconds: 3
              milliseconds: 0
          - wait_for_trigger:
            - platform: state
              entity_id:
              - binary_sensor.standing_desk_moving
              to: 'off'
            timeout:
              hours: 0
              minutes: 0
              seconds: 20
              milliseconds: 0
          - if:
            - condition: template
              value_template: '{{ repeat.index >= 5 }}'
            then:
            - stop: ''
          while:
          - condition: not
            conditions:
            - condition: state
              entity_id: sensor.standing_desk_state
              state: seated_position
  fields:
    target_position:
      selector:
        select:
          options:
          - label: Position debout
            value: standing
          - label: Position assise
            value: sitting
          multiple: false
      name: Position cible
      description: Position cible du standing desk (Assise ou Debout)
      required: true
  description: Contrôler les standing desk dans le bureau en donnant une position
    cible. (Assise ou Debout)
  icon: mdi:desk
eteindre_tous_les_lecteur_multimedia:
  alias: Éteindre tous les lecteurs multimédia
  sequence:
  - action: media_player.media_pause
    metadata: {}
    data: {}
    target:
      entity_id:
      - media_player.sonos_bureau
      - media_player.sonos_chambre
      - media_player.sonos_chambre_marilou
      - media_player.sonos_salle_de_douche_2
  - action: media_player.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: media_player.all_media_players
  description: ''
  icon: mdi:television-speaker-off
test_2:
  alias: Crazy Wake Up
  sequence:
  - action: media_player.volume_set
    target:
      entity_id: media_player.sonos_chambre
    data:
      volume_level: 0.7
  - action: media_player.play_media
    target:
      entity_id: media_player.sonos_chambre
    data:
      media_content_id: media-source://media_source/local/wake_up.mp3
      media_content_type: audio/mpeg
    metadata:
      title: wake_up.mp3
      thumbnail:
      media_class: music
      children_media_class:
      navigateIds:
      - {}
      - media_content_type: app
        media_content_id: media-source://media_source
  - wait_for_trigger:
    - platform: state
      entity_id:
      - media_player.sonos_chambre
      to: playing
  - action: light.turn_on
    metadata: {}
    data:
      transition: 14
    target:
      area_id: chambre
  - delay:
      hours: 0
      minutes: 0
      seconds: 12
      milliseconds: 0
  - action: light.turn_off
    metadata: {}
    data: {}
    target:
      area_id: chambre
  - delay:
      hours: 0
      minutes: 0
      seconds: 2
      milliseconds: 0
  - repeat:
      sequence:
      - action: light.turn_on
        metadata: {}
        data:
          flash: short
        target:
          entity_id: light.chambre
      - delay:
          hours: 0
          minutes: 0
          seconds: 1
          milliseconds: 0
      while:
      - condition: state
        entity_id: media_player.sonos_chambre
        state: playing
  description: ''
